// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index(userId)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  hasOnboarded  Boolean        @default(false)
  interest      String?        @db.Text
  jobTitle      String?
  currentTeam   Team?          @relation("CurrentTeam", fields: [currentTeamId], references: [id])
  teams         Team[]         @relation("Teams")
  currentTeamId String?
  roles         UserTeamRole[]

  @@index([currentTeamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id               String         @id @default(cuid())
  name             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  users            User[]         @relation("Teams")
  currentTeamUsers User[]         @relation("CurrentTeam")
  roles            UserTeamRole[]
  userInvites      UserInvite[]
}

model UserTeamRole {
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId String
  teamId String

  @@id([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model UserInvite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  email     String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role      String
  teamId    String

  @@unique([teamId, email])
  @@index([teamId])
}
